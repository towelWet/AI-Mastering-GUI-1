/**
 * AI Mastering API
 * This is a AI Mastering API document. You can use the mastering feature of [AI Mastering](https://aimastering.com) through this API.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@bakuage.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Aimastering);
  }
}(this, function(expect, Aimastering) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Aimastering.AnonymizedMastering();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AnonymizedMastering', function() {
    it('should create an instance of AnonymizedMastering', function() {
      // uncomment below and update the code to test AnonymizedMastering
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be.a(Aimastering.AnonymizedMastering);
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property userAuthProvider (base name: "user_auth_provider")', function() {
      // uncomment below and update the code to test the property userAuthProvider
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property mode (base name: "mode")', function() {
      // uncomment below and update the code to test the property mode
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property failureReason (base name: "failure_reason")', function() {
      // uncomment below and update the code to test the property failureReason
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property targetLoudness (base name: "target_loudness")', function() {
      // uncomment below and update the code to test the property targetLoudness
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property outputFormat (base name: "output_format")', function() {
      // uncomment below and update the code to test the property outputFormat
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property preset (base name: "preset")', function() {
      // uncomment below and update the code to test the property preset
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property bitDepth (base name: "bit_depth")', function() {
      // uncomment below and update the code to test the property bitDepth
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property sampleRate (base name: "sample_rate")', function() {
      // uncomment below and update the code to test the property sampleRate
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property reviewScore (base name: "review_score")', function() {
      // uncomment below and update the code to test the property reviewScore
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property masteringMatchingLevel (base name: "mastering_matching_level")', function() {
      // uncomment below and update the code to test the property masteringMatchingLevel
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property mastering (base name: "mastering")', function() {
      // uncomment below and update the code to test the property mastering
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property paid (base name: "paid")', function() {
      // uncomment below and update the code to test the property paid
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property paymentService (base name: "payment_service")', function() {
      // uncomment below and update the code to test the property paymentService
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property retryCount (base name: "retry_count")', function() {
      // uncomment below and update the code to test the property retryCount
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property masteringReverb (base name: "mastering_reverb")', function() {
      // uncomment below and update the code to test the property masteringReverb
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property masteringReverbGain (base name: "mastering_reverb_gain")', function() {
      // uncomment below and update the code to test the property masteringReverbGain
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property lowCutFreq (base name: "low_cut_freq")', function() {
      // uncomment below and update the code to test the property lowCutFreq
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property highCutFreq (base name: "high_cut_freq")', function() {
      // uncomment below and update the code to test the property highCutFreq
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instane = new Aimastering.AnonymizedMastering();
      //expect(instance).to.be();
    });

  });

}));
